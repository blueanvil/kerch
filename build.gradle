group = 'com.blueanvil'
version = '0.9.20'

buildscript {
    apply from: 'dependencies.gradle'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    }
}

apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven {
        url "http://dl.bintray.com/mbuhot/maven"
    }
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    compile "org.elasticsearch.client:transport:$elasticSearchVersion"
    compile "org.reflections:reflections:$reflectionsVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    testCompile "com.github.javafaker:javafaker:$javaFakerVersion"
    testCompile "commons-io:commons-io:$commonsIoVersion"
    testCompile 'mbuhot:eskotlin:0.6.0'
    testCompile "com.github.jkcclemens:khttp:-SNAPSHOT"
    testCompile "org.json:json:20170516"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "etc/dokka"
}

jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

task runTools(type: Exec) {
    commandLine './start-tools.sh'
}

task stopTools(type: Exec) {
    commandLine './stop-tools.sh'
}

tasks.test.dependsOn("runTools")
test.finalizedBy(stopTools)


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.sourcesJar

            pom {
                name = 'Kerch'
                description = 'Kotlin utilities for Elasticsearch'
                url = 'https://github.com/blueanvil/kerch'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'cosmin-marginean'
                        name = 'Cosmin Marginean'
                        email = 'cos.marginean@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/blueanvil/kerch.git'
                    developerConnection = 'scm:git:ssh://github.com/blueanvil/kerch.git'
                    url = 'https://github.com/blueanvil/kerch'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

